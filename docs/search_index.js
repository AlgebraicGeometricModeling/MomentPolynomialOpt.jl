var documenterSearchIndex = {"docs":
[{"location":"code/3.polynomials/#Polynomials","page":"Polynomials","title":"Polynomials","text":"","category":"section"},{"location":"code/3.polynomials/","page":"Polynomials","title":"Polynomials","text":"Pages = [\"3.polynomials.md\"]","category":"page"},{"location":"code/3.polynomials/","page":"Polynomials","title":"Polynomials","text":"polar_ideal","category":"page"},{"location":"code/3.polynomials/#MomentTools.polar_ideal","page":"Polynomials","title":"MomentTools.polar_ideal","text":"j = polar_ideal(f, [h1, h2, ...], [g1, g2, ...], X)\n\nCompute generators of the polar ideal associated with f, [h1, h2, ...], [g1, g2, ...] (equality constraints hi == 0 and the sign constraints gi >= 0) with respect to the variable vector X.\n\nf, hi, gi should be polynomials in variables X.\n\n\n\n\n\n","category":"function"},{"location":"code/3.polynomials/","page":"Polynomials","title":"Polynomials","text":"preordering","category":"page"},{"location":"code/3.polynomials/#MomentTools.preordering","page":"Polynomials","title":"MomentTools.preordering","text":"pg = preordering([g1, g2, ...])\n\nCompute all the product, without repetitions, of the gi's i.e. computes the generators (as a quadratic module) of the preordering O(g1, g2, ...).\n\n\n\n\n\n","category":"function"},{"location":"expl/2.positive_polynomial/#The-minimizers-of-Motzkin-polynomial","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"","category":"section"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"using DynamicPolynomials, MomentTools, Plots;\nusing JuMP, MosekTools; optimizer = optimizer_with_attributes(Mosek.Optimizer, \"QUIET\" => true);","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"We use Mosek solver for the convex optimization on SDP matrices.","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"X  = @polyvar x y\nmotz = x^4*y^2 + x^2*y^4 - 3x^2*y^2  + 1 ","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"$ x^{4}y^{2} + x^{2}y^{4} - 3x^{2}y^{2} + 1 $","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"This polynomial, known as Motzkin polynomial, is non-negative but not a sum of squares.","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"We construction a moment relaxation of order 6, imposing the moments to come from a probability measure, with total mass equal to 1:","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"M = MomentModel(X, 6, optimizer)\nconstraint_unitmass(M)\nobjective(M,motz)\nv, M = optimize(M)","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"(-1.6742123696021906e-10, \nA Moment program with:\nA JuMP Model\nMinimization problem with:\nVariables: 91\nObjective function type: GenericAffExpr{Float64,VariableRef}\n`GenericAffExpr{Float64,VariableRef}`-in-`MathOptInterface.EqualTo{Float64}`: 1 constraint\n`Array{VariableRef,1}`-in-`MathOptInterface.PositiveSemidefiniteConeTriangle`: 1 constraint\nModel mode: AUTOMATIC\nCachingOptimizer state: ATTACHED_OPTIMIZER\nSolver name: Dual model with Mosek attached\nNames registered in the model: basis, degree, dual, index, moments, monomials, nu, variables, y)","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"v","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"-1.6742123696021906e-10","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"The objective value is a lower bound of the actual mimimal value 0 of Motzkin polynomial.","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"We extract a measure from the sequence of moments, using the function MultivariateSeries.decompose:","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"w, Xi = get_measure(M)","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"(Float64[], Array{Float64}(undef,2,0))","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"w is the vector of weights and Xi is the matrix of points, that is support of the measure mu=sum_i omega_i delta_Xi_i. w[i] is the weight of the Dirac measure corresponding to the point Xi[:,i] in this decomposition.","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"Here no point is found to approximate the optimal moment sequence.","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"Now, to find the minimizers, we add as constraints, that the gradient of the polynomial should vanish:","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"M = MomentModel(X, 6, optimizer)\nconstraint_unitmass(M)\nobjective(M,motz)\n\nJ = differentiate(motz,X)\nconstraint_zero(M, J...)\nv = optimize(M)[1]","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"3.6962168659115946e-8","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"w, Xi = get_measure(M)","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"([0.24999999524007935, 0.24999999121486882, 0.2499999912148701, 0.2499999952400783], [1.0000000029258804 1.0000000031154819 -1.0000000031154817 -1.0000000029258806; -1.0000000029933198 1.0000000031156946 -1.0000000031156946 1.0000000029933198])","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"p0 = plot([-1,-1,1,1], [-1,1,-1,1], seriestype = :scatter, color=:blue, fmt=:png)\np1 = plot!(p0,real(Xi[1,:]), real(Xi[2,:]), seriestype = :scatter, zcolor = abs.(w), m = (:heat, 0.8, Plots.stroke(1, :black)), fmt=:png)","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"(Image: png)","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"We find approximately the 4 minimizers.","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"Finally, to find the minimizers, we try another strategy and add the constraint that the polynomial should vanish, since we know that its minimal value (at the minimizers) is 0:","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"M = MomentModel(X, 6, optimizer)\nconstraint_unitmass(M)\nobjective(M,motz)\n\nconstraint_zero(M, motz)\n\nv = optimize(M)[1]","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"2.3258039938411912e-10","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"w, Xi = get_measure(M)","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"([0.25000000859132376, 0.24999999061879682, 0.24999999061878705, 0.2500000085913232], [1.000000018789731 1.0000000188469331 -1.000000018846933 -1.000000018789731; 1.0000000188709834 -1.0000000189095657 1.0000000189095657 -1.0000000188709837])","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"p0 = plot([-1,-1,1,1], [-1,1,-1,1], seriestype = :scatter, color=:blue, fmt=:png)\np1 = plot!(p0,real(Xi[1,:]), real(Xi[2,:]), seriestype = :scatter, zcolor = abs.(w), m = (:heat, 0.8, Plots.stroke(1, :black)), fmt=:png)","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"(Image: png)","category":"page"},{"location":"expl/2.positive_polynomial/","page":"The minimizers of Motzkin polynomial","title":"The minimizers of Motzkin polynomial","text":"The minimizers (in red) are close to that actual minimizers (in blue).","category":"page"},{"location":"expl/1.maximizers/#Solving-a-polynomial-optimization-problem","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"","category":"section"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"using DynamicPolynomials, MomentTools","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"X  = @polyvar x1 x2\n\ne1 = x1^2-2\ne2 = (x2^2-3)*(x1*x2-2)\n\np1 = x1\np2 = 2-x2;","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"We are looking for the points with maximal x_1 in the set e_1=e_2=0 such that p_1geq 0, p_2geq 0. ","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"We solve a SDP relaxation of order d=4, where the variables of the underlying convex optimization problem are the moments of order le 2d in the variables x_1 x_2.","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"using CSDP; optimizer = CSDP.Optimizer\nv, M = maximize(x1, [e1, e2], [p1,p2], X, 4, optimizer)\nv","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"CSDP 6.2.0\nIter:  0 Ap: 0.00e+00 Pobj:  0.0000000e+00 Ad: 0.00e+00 Dobj:  0.0000000e+00 \nIter:  1 Ap: 7.96e-01 Pobj:  1.3512389e+00 Ad: 7.77e-01 Dobj: -1.6779112e-01 \nIter:  2 Ap: 5.89e-01 Pobj:  1.3773383e+01 Ad: 6.75e-01 Dobj: -3.1219527e-01 \nIter:  3 Ap: 1.46e-01 Pobj:  1.6205657e+02 Ad: 1.91e-01 Dobj: -7.3806838e-01 \nIter:  4 Ap: 7.10e-01 Pobj: -7.0126415e+00 Ad: 6.50e-01 Dobj: -1.5156365e+00 \nIter:  5 Ap: 8.65e-01 Pobj: -7.5100797e+00 Ad: 8.90e-01 Dobj: -1.3959313e+00 \nIter:  6 Ap: 7.93e-01 Pobj: -3.6855309e+00 Ad: 7.29e-01 Dobj: -1.4143253e+00 \nIter:  7 Ap: 7.37e-01 Pobj: -2.5848103e+00 Ad: 7.43e-01 Dobj: -1.4136246e+00 \nIter:  8 Ap: 5.35e-01 Pobj: -2.1333028e+00 Ad: 7.75e-01 Dobj: -1.4141761e+00 \nIter:  9 Ap: 6.34e-01 Pobj: -1.7466820e+00 Ad: 7.25e-01 Dobj: -1.4141777e+00 \nIter: 10 Ap: 7.08e-01 Pobj: -1.5388419e+00 Ad: 7.76e-01 Dobj: -1.4142100e+00 \nIter: 11 Ap: 7.56e-01 Pobj: -1.4544602e+00 Ad: 7.16e-01 Dobj: -1.4142117e+00 \nIter: 12 Ap: 6.99e-01 Pobj: -1.4305242e+00 Ad: 7.56e-01 Dobj: -1.4142132e+00 \nIter: 13 Ap: 5.90e-01 Pobj: -1.4222141e+00 Ad: 7.46e-01 Dobj: -1.4142134e+00 \nIter: 14 Ap: 6.66e-01 Pobj: -1.4173958e+00 Ad: 9.44e-01 Dobj: -1.4142135e+00 \nIter: 15 Ap: 8.91e-01 Pobj: -1.4146634e+00 Ad: 1.00e+00 Dobj: -1.4142135e+00 \nIter: 16 Ap: 9.38e-01 Pobj: -1.4142490e+00 Ad: 1.00e+00 Dobj: -1.4142136e+00 \nIter: 17 Ap: 9.85e-01 Pobj: -1.4142149e+00 Ad: 1.00e+00 Dobj: -1.4142136e+00 \nIter: 18 Ap: 1.00e+00 Pobj: -1.4142138e+00 Ad: 1.00e+00 Dobj: -1.4142136e+00 \nIter: 19 Ap: 1.00e+00 Pobj: -1.4142136e+00 Ad: 1.00e+00 Dobj: -1.4142136e+00 \nIter: 20 Ap: 1.00e+00 Pobj: -1.4142136e+00 Ad: 9.37e-01 Dobj: -1.4142136e+00 \nIter: 21 Ap: 1.00e+00 Pobj: -1.4142136e+00 Ad: 8.42e-01 Dobj: -1.4142136e+00 \nSuccess: SDP solved\nPrimal objective value: -1.4142136e+00 \nDual objective value: -1.4142136e+00 \nRelative primal infeasibility: 6.98e-11 \nRelative dual infeasibility: 7.51e-10 \nReal Relative Gap: 4.20e-10 \nXZ Relative Gap: 7.21e-09 \nDIMACS error measures: 6.98e-11 0.00e+00 5.92e-09 0.00e+00 4.20e-10 7.21e-09\n\n\n\n\n\n1.414213562364079","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"The output of the function maximize is the optimal value v and the optimization model M. ","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"The points which reach the optimal value, can be obtained as follows: ","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"Xi = get_minimizers(M)","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"2×3 Array{Float64,2}:\n  1.41421  1.41421  1.41421\n -1.73205  1.41416  1.73198","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"Each column of this matrix represents a point. It is an ntimes r  matrix, where n is the number of coordinates in X and r is the number of points.","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"The weighted sum of Dirac measures associated to the optimal moment sequence can be obtained as follows:","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"w, Xi = get_measure(M)","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"([0.22888491281955842, 0.4931176123147139, 0.277997474859004], [1.414213562391005 1.4142135621730105 1.4142135621419918; -1.7320521660841413 1.4141606157582571 1.7319755718907128])","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"w is the vector of weights and Xi is the matrix of points, that is support of the measure mu=sum_i omega_i delta_Xi_i.","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"Here is another way to solve it. We describe it as a Polynomial Optimization Problem and use the function optimize:","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"pop = [(x1, \"sup\"), (e1,\"=0\"),(e2 ,\"=0\"),(p1,\">=0\"),(p2,\">=0\")]","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"5-element Array{Tuple{AbstractPolynomialLike{Int64},String},1}:\n (x1, \"sup\")                     \n (x1² - 2, \"=0\")                 \n (x1x2³ - 3x1x2 - 2x2² + 6, \"=0\")\n (x1, \">=0\")                     \n (-x2 + 2, \">=0\")","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"v, M = optimize(pop, X, 4, optimizer)","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"CSDP 6.2.0\nIter:  0 Ap: 0.00e+00 Pobj:  0.0000000e+00 Ad: 0.00e+00 Dobj:  0.0000000e+00 \nIter:  1 Ap: 7.96e-01 Pobj:  1.3512389e+00 Ad: 7.77e-01 Dobj: -1.6779112e-01 \nIter:  2 Ap: 5.89e-01 Pobj:  1.3773383e+01 Ad: 6.75e-01 Dobj: -3.1219527e-01 \nIter:  3 Ap: 1.46e-01 Pobj:  1.6205657e+02 Ad: 1.91e-01 Dobj: -7.3806838e-01 \nIter:  4 Ap: 7.10e-01 Pobj: -7.0126412e+00 Ad: 6.50e-01 Dobj: -1.5156365e+00 \nIter:  5 Ap: 8.65e-01 Pobj: -7.5100797e+00 Ad: 8.90e-01 Dobj: -1.3959313e+00 \nIter:  6 Ap: 7.93e-01 Pobj: -3.6855309e+00 Ad: 7.29e-01 Dobj: -1.4143253e+00 \nIter:  7 Ap: 7.37e-01 Pobj: -2.5848117e+00 Ad: 7.43e-01 Dobj: -1.4136246e+00 \nIter:  8 Ap: 5.35e-01 Pobj: -2.1333020e+00 Ad: 7.75e-01 Dobj: -1.4141762e+00 \nIter:  9 Ap: 6.34e-01 Pobj: -1.7466786e+00 Ad: 7.25e-01 Dobj: -1.4141777e+00 \nIter: 10 Ap: 7.08e-01 Pobj: -1.5388415e+00 Ad: 7.76e-01 Dobj: -1.4142100e+00 \nIter: 11 Ap: 7.56e-01 Pobj: -1.4544598e+00 Ad: 7.16e-01 Dobj: -1.4142117e+00 \nIter: 12 Ap: 6.99e-01 Pobj: -1.4305245e+00 Ad: 7.56e-01 Dobj: -1.4142132e+00 \nIter: 13 Ap: 5.90e-01 Pobj: -1.4222141e+00 Ad: 7.46e-01 Dobj: -1.4142134e+00 \nIter: 14 Ap: 6.66e-01 Pobj: -1.4173956e+00 Ad: 9.44e-01 Dobj: -1.4142135e+00 \nIter: 15 Ap: 8.91e-01 Pobj: -1.4146603e+00 Ad: 1.00e+00 Dobj: -1.4142135e+00 \nIter: 16 Ap: 9.38e-01 Pobj: -1.4142481e+00 Ad: 1.00e+00 Dobj: -1.4142136e+00 \nIter: 17 Ap: 9.85e-01 Pobj: -1.4142148e+00 Ad: 1.00e+00 Dobj: -1.4142136e+00 \nIter: 18 Ap: 1.00e+00 Pobj: -1.4142138e+00 Ad: 1.00e+00 Dobj: -1.4142136e+00 \nIter: 19 Ap: 1.00e+00 Pobj: -1.4142136e+00 Ad: 1.00e+00 Dobj: -1.4142136e+00 \nIter: 20 Ap: 1.00e+00 Pobj: -1.4142136e+00 Ad: 9.37e-01 Dobj: -1.4142136e+00 \nIter: 21 Ap: 1.00e+00 Pobj: -1.4142136e+00 Ad: 8.41e-01 Dobj: -1.4142136e+00 \nSuccess: SDP solved\nPrimal objective value: -1.4142136e+00 \nDual objective value: -1.4142136e+00 \nRelative primal infeasibility: 7.60e-11 \nRelative dual infeasibility: 7.53e-10 \nReal Relative Gap: 4.04e-10 \nXZ Relative Gap: 7.23e-09 \nDIMACS error measures: 7.60e-11 0.00e+00 5.94e-09 0.00e+00 4.04e-10 7.23e-09\n\n\n\n\n\n(1.4142135623642407, \nA Moment program with:\nA JuMP Model\nMaximization problem with:\nVariables: 45\nObjective function type: JuMP.GenericAffExpr{Float64,JuMP.VariableRef}\n`JuMP.GenericAffExpr{Float64,JuMP.VariableRef}`-in-`MathOptInterface.EqualTo{Float64}`: 44 constraints\n`Array{JuMP.VariableRef,1}`-in-`MathOptInterface.PositiveSemidefiniteConeTriangle`: 1 constraint\n`Array{JuMP.GenericAffExpr{Float64,JuMP.VariableRef},1}`-in-`MathOptInterface.PositiveSemidefiniteConeSquare`: 2 constraints\nModel mode: AUTOMATIC\nCachingOptimizer state: ATTACHED_OPTIMIZER\nSolver name: Dual model with CSDP attached\nNames registered in the model: basis, degree, dual, index, moments, monomials, nu, variables, y)","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"get_minimizers(M)","category":"page"},{"location":"expl/1.maximizers/","page":"Solving a polynomial optimization problem","title":"Solving a polynomial optimization problem","text":"2×3 Array{Float64,2}:\n  1.41421  1.41421  1.41421\n -1.73205  1.41416  1.73198","category":"page"},{"location":"code/1.moment_model/#Moment-Program","page":"Moment Program","title":"Moment Program","text":"","category":"section"},{"location":"code/1.moment_model/","page":"Moment Program","title":"Moment Program","text":"Pages = [\"1.moment_model.md\"]","category":"page"},{"location":"code/1.moment_model/","page":"Moment Program","title":"Moment Program","text":"MomentModel","category":"page"},{"location":"code/1.moment_model/#Constraints","page":"Moment Program","title":"Constraints","text":"","category":"section"},{"location":"code/1.moment_model/","page":"Moment Program","title":"Moment Program","text":"constraint_zero","category":"page"},{"location":"code/1.moment_model/","page":"Moment Program","title":"Moment Program","text":"constraint_nneg","category":"page"},{"location":"code/1.moment_model/","page":"Moment Program","title":"Moment Program","text":"constraint_moments","category":"page"},{"location":"code/1.moment_model/","page":"Moment Program","title":"Moment Program","text":"constraint_unitmass","category":"page"},{"location":"code/1.moment_model/#Objective-function","page":"Moment Program","title":"Objective function","text":"","category":"section"},{"location":"code/1.moment_model/","page":"Moment Program","title":"Moment Program","text":"objective","category":"page"},{"location":"code/1.moment_model/","page":"Moment Program","title":"Moment Program","text":"objective_tv","category":"page"},{"location":"code/1.moment_model/","page":"Moment Program","title":"Moment Program","text":"objective_ncl","category":"page"},{"location":"package/#About-MomentTools.jl","page":"About the package","title":"About MomentTools.jl","text":"","category":"section"},{"location":"package/#Installation","page":"About the package","title":"Installation","text":"","category":"section"},{"location":"package/","page":"About the package","title":"About the package","text":"The package can be installed from Julia as follows:","category":"page"},{"location":"package/","page":"About the package","title":"About the package","text":"] add https://gitlab.inria.fr/AlgebraicGeometricModeling/MomentTools.jl\n","category":"page"},{"location":"package/","page":"About the package","title":"About the package","text":"A version of Julia >= 1.3 should be used.","category":"page"},{"location":"package/","page":"About the package","title":"About the package","text":"It depends on the following packages, which are installed automatically:","category":"page"},{"location":"package/","page":"About the package","title":"About the package","text":"Combinatorics for the computation of polar ideals.\nDualization for the use of dual optimization solvers on the moment optimization problems.\nDynamicPolynomials \nJuMP\nLinearAlgebra\nMultivariateSeries (v>=1.1.2) for the representation of moment sequences and the decomposition of series.","category":"page"},{"location":"package/","page":"About the package","title":"About the package","text":"To solve the moment optimization problems, SDP optimizers have also to be installed, such as MosekTools, CSD, ...","category":"page"},{"location":"package/#Development","page":"About the package","title":"Development","text":"","category":"section"},{"location":"package/","page":"About the package","title":"About the package","text":"The git project of the package is     https://gitlab.inria.fr/AlgebraicGeometricModeling/MomentTools.jl.","category":"page"},{"location":"package/","page":"About the package","title":"About the package","text":"The main developpers are (so far)","category":"page"},{"location":"package/","page":"About the package","title":"About the package","text":"Lorenzo Baldi\nBernard Mourrain","category":"page"},{"location":"package/","page":"About the package","title":"About the package","text":"The development is done in relation with the activity of the network POEMA.","category":"page"},{"location":"package/#See-also","page":"About the package","title":"See also","text":"","category":"section"},{"location":"package/","page":"About the package","title":"About the package","text":"Other Julia packages are currently developed for polynomial and moment optimization:","category":"page"},{"location":"package/","page":"About the package","title":"About the package","text":"MomentOpt\nSumOfSquares\nPolyJuMP","category":"page"},{"location":"expl/3.positive_moment_sequences/#Constraints-on-Positive-Moment-Sequences","page":"Constraints on Positive Moment Sequences","title":"Constraints on Positive Moment Sequences","text":"","category":"section"},{"location":"expl/3.positive_moment_sequences/","page":"Constraints on Positive Moment Sequences","title":"Constraints on Positive Moment Sequences","text":"using DynamicPolynomials, MultivariateSeries, MomentTools\nusing MosekTools; optimizer = Mosek.Optimizer;","category":"page"},{"location":"expl/3.positive_moment_sequences/","page":"Constraints on Positive Moment Sequences","title":"Constraints on Positive Moment Sequences","text":"┌ Info: Precompiling MomentTools [65cd4d85-9fe5-4fdc-93e2-c8798c615752]\n└ @ Base loading.jl:1273\n┌ Warning: Package MomentTools does not have MultivariateSeries in its dependencies:\n│ - If you have MomentTools checked out for development and have\n│   added MultivariateSeries as a dependency but haven't updated your primary\n│   environment's manifest file, try `Pkg.resolve()`.\n│ - Otherwise you may need to report an issue with MomentTools\n└ Loading MultivariateSeries into MomentTools from project dependency, future warnings for MomentTools are suppressed.","category":"page"},{"location":"expl/3.positive_moment_sequences/","page":"Constraints on Positive Moment Sequences","title":"Constraints on Positive Moment Sequences","text":"X = @polyvar x y\nd = 10\nM  = MomentModel(X, d, optimizer, nu=2)","category":"page"},{"location":"expl/3.positive_moment_sequences/","page":"Constraints on Positive Moment Sequences","title":"Constraints on Positive Moment Sequences","text":"A Moment program with:\nA JuMP Model\nFeasibility problem with:\nVariables: 462\n`Array{JuMP.VariableRef,1}`-in-`MathOptInterface.PositiveSemidefiniteConeTriangle`: 2 constraints\nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: Dual model with Mosek attached\nNames registered in the model: basis, degree, dual, index, moments, monomials, nu, variables, y","category":"page"},{"location":"expl/3.positive_moment_sequences/","page":"Constraints on Positive Moment Sequences","title":"Constraints on Positive Moment Sequences","text":"constraint_nneg(M,1, 1-x^2-y^2)\nconstraint_nneg(M,2, 1-x^2, 1-y^2)","category":"page"},{"location":"expl/3.positive_moment_sequences/","page":"Constraints on Positive Moment Sequences","title":"Constraints on Positive Moment Sequences","text":"L = monomials(X, seq(0:2*d))\nlebesgue(i,j) = ((1-(-1)^(i+1))/(i+1))*((1-(-1)^(j+1))/(j+1))\nconstraint_moments(M,\n                   [(m=>lebesgue(exponents(m)...)) for m in L],\n                   collect(1:2), [1,1] )","category":"page"},{"location":"expl/3.positive_moment_sequences/","page":"Constraints on Positive Moment Sequences","title":"Constraints on Positive Moment Sequences","text":"objective(M, 1, 1.0, \"sup\")","category":"page"},{"location":"expl/3.positive_moment_sequences/","page":"Constraints on Positive Moment Sequences","title":"Constraints on Positive Moment Sequences","text":"$ y_{1,1} $","category":"page"},{"location":"expl/3.positive_moment_sequences/","page":"Constraints on Positive Moment Sequences","title":"Constraints on Positive Moment Sequences","text":"v = optimize(M)[1]","category":"page"},{"location":"expl/3.positive_moment_sequences/","page":"Constraints on Positive Moment Sequences","title":"Constraints on Positive Moment Sequences","text":"Problem\n  Name                   :                 \n  Objective sense        : min             \n  Type                   : CONIC (conic optimization problem)\n  Constraints            : 462             \n  Cones                  : 0               \n  Scalar variables       : 231             \n  Matrix variables       : 5               \n  Integer variables      : 0               \n\nOptimizer started.\nPresolve started.\nLinear dependency checker started.\nLinear dependency checker terminated.\nEliminator started.\nFreed constraints in eliminator : 0\nEliminator terminated.\nEliminator started.\nFreed constraints in eliminator : 0\nEliminator terminated.\nEliminator - tries                  : 2                 time                   : 0.00            \nLin. dep.  - tries                  : 1                 time                   : 0.00            \nLin. dep.  - number                 : 0               \nPresolve terminated. Time: 0.00    \nProblem\n  Name                   :                 \n  Objective sense        : min             \n  Type                   : CONIC (conic optimization problem)\n  Constraints            : 462             \n  Cones                  : 0               \n  Scalar variables       : 231             \n  Matrix variables       : 5               \n  Integer variables      : 0               \n\nOptimizer  - threads                : 8               \nOptimizer  - solved problem         : the primal      \nOptimizer  - Constraints            : 462\nOptimizer  - Cones                  : 1\nOptimizer  - Scalar variables       : 232               conic                  : 232             \nOptimizer  - Semi-definite variables: 5                 scalarized             : 7527            \nFactor     - setup time             : 0.01              dense det. time        : 0.00            \nFactor     - ML order time          : 0.00              GP order time          : 0.00            \nFactor     - nonzeros before factor : 5.43e+04          after factor           : 8.74e+04        \nFactor     - dense dim.             : 2                 flops                  : 5.44e+07        \nITE PFEAS    DFEAS    GFEAS    PRSTATUS   POBJ              DOBJ              MU       TIME  \n0   3.0e+00  4.0e+00  1.0e+00  0.00e+00   0.000000000e+00   0.000000000e+00   1.0e+00  0.02  \n1   8.6e-01  1.1e+00  7.4e-02  3.19e-01   2.227313818e+00   2.034785147e+00   2.9e-01  0.03  \n2   2.0e-01  2.7e-01  8.0e-03  1.62e+00   3.558535953e+00   3.532069682e+00   6.8e-02  0.05  \n3   5.3e-02  7.1e-02  1.1e-03  1.50e+00   3.775424594e+00   3.770494332e+00   1.8e-02  0.07  \n4   1.4e-02  1.9e-02  1.6e-04  1.01e+00   3.774265528e+00   3.773107456e+00   4.7e-03  0.09  \n5   4.9e-03  6.5e-03  4.0e-05  8.08e-01   3.760047982e+00   3.759705942e+00   1.6e-03  0.10  \n6   2.7e-03  3.6e-03  2.4e-05  3.66e-01   3.749815207e+00   3.749724302e+00   8.9e-04  0.12  \n7   6.9e-04  9.2e-04  4.9e-06  3.80e-01   3.725437924e+00   3.725569163e+00   2.3e-04  0.14  \n8   2.4e-04  3.1e-04  1.2e-06  3.25e-01   3.704778259e+00   3.704873452e+00   7.9e-05  0.17  \n9   1.1e-04  1.4e-04  5.3e-07  2.30e-01   3.691943416e+00   3.692063045e+00   3.6e-05  0.18  \n10  3.1e-05  4.1e-05  1.0e-07  4.47e-01   3.676385386e+00   3.676448347e+00   1.0e-05  0.20  \n11  1.1e-05  1.5e-05  3.2e-08  4.65e-01   3.668719992e+00   3.668774291e+00   3.7e-06  0.22  \n12  6.1e-06  8.2e-06  2.0e-08  2.94e-02   3.664551877e+00   3.664634224e+00   2.0e-06  0.24  \n13  3.2e-06  4.3e-06  1.2e-08  -1.56e-01  3.657723571e+00   3.657826546e+00   1.1e-06  0.26  \n14  1.1e-06  1.5e-06  3.4e-09  1.35e-01   3.645081107e+00   3.645162092e+00   3.6e-07  0.28  \n15  3.8e-07  4.9e-07  1.1e-09  1.24e-01   3.633102930e+00   3.633176735e+00   1.2e-07  0.29  \n16  2.3e-07  2.8e-07  6.8e-10  -1.62e-03  3.627183700e+00   3.627277402e+00   6.9e-08  0.31  \n17  9.2e-08  1.2e-07  2.8e-10  4.23e-02   3.615519444e+00   3.615608628e+00   2.9e-08  0.33  \n18  1.6e-08  2.9e-08  5.5e-11  1.94e-01   3.599258722e+00   3.599314907e+00   7.2e-09  0.35  \n19  5.8e-09  1.0e-08  1.5e-11  5.22e-01   3.591755197e+00   3.591786889e+00   2.6e-09  0.38  \n20  1.7e-09  3.0e-09  2.5e-12  7.78e-01   3.587479170e+00   3.587490742e+00   7.4e-10  0.41  \n21  7.7e-10  1.4e-09  9.0e-13  7.69e-01   3.586171166e+00   3.586178254e+00   3.4e-10  0.44  \n22  6.1e-10  8.9e-10  5.9e-13  5.74e-01   3.585752489e+00   3.585759466e+00   2.2e-10  0.47  \n23  3.7e-10  5.4e-10  3.2e-13  4.66e-01   3.585225807e+00   3.585231576e+00   1.3e-10  0.50  \n24  1.9e-10  2.7e-10  1.6e-13  2.65e-01   3.584589117e+00   3.584594599e+00   6.7e-11  0.53  \n25  1.9e-10  2.7e-10  1.6e-13  4.02e-01   3.584580797e+00   3.584586260e+00   6.7e-11  0.56  \n26  1.8e-10  2.5e-10  1.4e-13  3.99e-01   3.584512733e+00   3.584518052e+00   6.2e-11  0.60  \n27  8.7e-11  1.1e-10  5.5e-14  3.85e-01   3.583843540e+00   3.583847594e+00   2.7e-11  0.63  \n28  8.1e-11  8.4e-11  3.8e-14  3.28e-01   3.583633435e+00   3.583636690e+00   2.1e-11  0.65  \n29  7.9e-11  8.2e-11  3.7e-14  5.30e-01   3.583619139e+00   3.583622347e+00   2.1e-11  0.69  \n30  7.8e-11  8.2e-11  3.7e-14  6.05e-01   3.583618683e+00   3.583621889e+00   2.1e-11  0.73  \n31  7.8e-11  8.2e-11  3.7e-14  5.50e-01   3.583618683e+00   3.583621889e+00   2.1e-11  0.77  \n32  7.8e-11  8.2e-11  3.7e-14  5.60e-01   3.583618683e+00   3.583621889e+00   2.1e-11  0.82  \nOptimizer terminated. Time: 0.90    \n\n\n\n\n\n\n3.5836218894780534","category":"page"},{"location":"#Moment-Tools","page":"Home","title":"Moment Tools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package provide tools for moment optimization problems on Positive Moment Sequences (PMS).","category":"page"},{"location":"","page":"Home","title":"Home","text":"A PMS is a sequence of moments mu=(mu_alpha) or equivalently a linear functional mu p in mathbbRmathbfx mapsto langle mu p rangle = sum_alpha p_alpha mu_alpha, which is positive on the square of the polynomials:  langle mu p^2 rangle geq 0 for all pin mathbbRmathbfx.","category":"page"},{"location":"#Optimization","page":"Home","title":"Optimization","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Optimization problems of the following form are considered:","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginarrayrl\nmathrminf_mu_i in PMS  sum_i langle f_istar mu_i 1 rangle \nst   sum_i g_ijstar mu_i succeq 0 quad j=1ldots n_1  \n       sum_i h_ijstar mu_i = 0 quad j=1ldots n_2\n       sum_i langle p_ijstar mu_i 1 rangle ge 0  quad j=1ldots n_3\n       sum_i langle q_ijstar mu_i 1 rangle = 0 quad j=1ldots n_4 \nendarray","category":"page"},{"location":"","page":"Home","title":"Home","text":"where","category":"page"},{"location":"","page":"Home","title":"Home","text":"mu_i are Positive Moment Sequences,\nf_i g_ij h_ij p_ij q_ij in mathbbRmathbfx are multivariate polynomials.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The solution of such optimization problem is approximated by the solution of a truncated relaxation of the problem, which is a convex optimization problem on Positive SemiDefinite matrices. Tools to construct such moment relaxation of a given order are available in the package.","category":"page"},{"location":"#Decomposition","page":"Home","title":"Decomposition","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Decomposition tools are available to decompose or approximate a PMS by a weighted sum of Dirac measures:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mu approx sum_k omega_k  delta_xi_k","category":"page"},{"location":"","page":"Home","title":"Home","text":"where omega_kin mathbbR (resp. mathbbC), xi_k in mathbbR^n (resp. mathbbC^n) and delta_xi is the Dirac measure at the point xi. ","category":"page"},{"location":"code/2.optimization/#Optimization","page":"Optimization","title":"Optimization","text":"","category":"section"},{"location":"code/2.optimization/","page":"Optimization","title":"Optimization","text":"Pages = [\"2.optimization.md\"]","category":"page"},{"location":"code/2.optimization/#Solving-moment-programs","page":"Optimization","title":"Solving moment programs","text":"","category":"section"},{"location":"code/2.optimization/","page":"Optimization","title":"Optimization","text":"JuMP.set_optimizer","category":"page"},{"location":"code/2.optimization/#JuMP.set_optimizer","page":"Optimization","title":"JuMP.set_optimizer","text":"set_optimizer(opt)\n\nDefine the default optimizer opt for the optimization problems created by MomentTools\n\n\n\n\n\n","category":"function"},{"location":"code/2.optimization/","page":"Optimization","title":"Optimization","text":"minimize","category":"page"},{"location":"code/2.optimization/#MomentTools.minimize","page":"Optimization","title":"MomentTools.minimize","text":"v, M = minimize(f, [e1, e2, ...], [p1, p2, ...], X, d, optimizer)\n\nCompute the infimum of f under the constraints e_i=0 and p_i geq 0 using a relaxation of order d on the moments in the variable X and the optimizer optimizer.\n\nSee optimize.\n\n\n\n\n\n","category":"function"},{"location":"code/2.optimization/","page":"Optimization","title":"Optimization","text":"polar_minimize","category":"page"},{"location":"code/2.optimization/#MomentTools.polar_minimize","page":"Optimization","title":"MomentTools.polar_minimize","text":"v, M = polar_minimize(f, [h1, h2, ...], [g1, g2, ...], X, degree_approx, optimizer)\n\nCompute the infimum of the f (equality constraints hi == 0 and the sign constraints gi >= 0) on the moment side. It does that calling minimize(...), replacing the equality constraints  [h1, h2, ...] with generators of the polar ideal.\n\nf, hi, gi should be polynomials in the variables X.\n\nIf the problem is feasible and has minimizers, it outputs\n\nv: the minimum value\nM: the moment model of type MOM.Model\n\n\n\n\n\n","category":"function"},{"location":"code/2.optimization/","page":"Optimization","title":"Optimization","text":"maximize","category":"page"},{"location":"code/2.optimization/#MomentTools.maximize","page":"Optimization","title":"MomentTools.maximize","text":"v, M = maximize(f, [e1, e2, ...], [p1, p2, ...], X, d, optimizer)\n\nSimilar to the function minimize but compute the supremun of f.\n\nSee optimize.\n\n\n\n\n\n","category":"function"},{"location":"code/2.optimization/","page":"Optimization","title":"Optimization","text":"optimize","category":"page"},{"location":"code/2.optimization/#MomentTools.optimize","page":"Optimization","title":"MomentTools.optimize","text":"v, M = optimize(M)\n\nRun the optimizer on the moment program M and output the objective_value v and the moment program M. If the optimization program has no solution, it returns nothing and M.\n\n\n\n\n\nv, M = optimize(M, optimizer)\n\nRun the optimizer on the moment program M using the optimizer optimizer and output the objective_value v and the moment program M. If the optimization program has no solution, it returns nothing and M. \n\n\n\n\n\nv, M = optimize(sense, f, [e1, e2, ...], [p1, p2, ...], X, d)\n\nCompute the optimum of f under the constraints e_i =0 and p_i geq 0 using a relaxation of order d on the moments in the variable X. \n\nf e_i p_i should be polynomials in the variables X.\n'sense` is a Symbol in [:Inf,:inf,:Min,:min]  or :Sup, :sup, :Max, :max\nX is a tuple of variables\nd is the order of the relaxation\noptimizeris the optimizer used to solve the moment relaxation. By default it is MMT[:optimizer].\n\nIf the problem is feasible and has minimizers, it outputs\n\nv: the optimum value\nM: the moment model of type JuMP.Model\n\nExample\n\nusing MomentTools\n\nX  = @polyvar x1 x2\ne1 = x1^2-2\ne2 = (x2^2-3)*(x1*x2-2)\np1 = x1\np2 = 2-x2\nv, M = optimize(:inf, -x1, [e1, e2], [p1, p2], X, 3)\n\nTo recover the optimizers, see get_minimizers, get_measure, get_series.\n\n\n\n\n\nv, M = optimize([(f, set) ...], X, d)\n\nSolve the moment program of relaxation of order d in the variables X, defined by the constraint or objective paires (f, set) where f is a polynomial and set is a string\n\n\"inf\", \"sup\" to define the objective.\n\"=0\" to define zero constraints:\n\">=0\", \"<=0\" to define sign constraints\n\nIt outputs\n\nv: the optimal value\nM: the optimized moment program of type MOM.Model\n\nExample\n\nusing MomentTools\n\nX  = @polyvar x1 x2\ne1 = x1^2-2\ne2 = (x2^2-3)*(x1*x2-2)\np1 = x1\np2 = 2-x2\nv, M = optimize([(-x1, \"inf\"), (e1, \"=0\"), (e2, \"=0\"), (p1, \">=0\"), (p2>=0)], X, 3)\n\nTo recover the optimal values, see get_minimizers, get_measure, get_series.\n\n\n\n\n\n","category":"function"},{"location":"code/2.optimization/#Optimal-solutions","page":"Optimization","title":"Optimal solutions","text":"","category":"section"},{"location":"code/2.optimization/","page":"Optimization","title":"Optimization","text":"get_minimizers","category":"page"},{"location":"code/2.optimization/#MomentTools.get_minimizers","page":"Optimization","title":"MomentTools.get_minimizers","text":"get_minimizers(M, , t::Int64 = 2*M[:degree]-1)\n\nReturn the minimizer points  of the optimized moment program M, using moments of degree <=t (default: twice the order of the relaxation minus 2)\n\nget_minimizer(M)\n\n[1.41421 1.73205; 1.41421 1.41421; 1.41421 -1.73205]\n\n\n\n\n\n","category":"function"},{"location":"code/2.optimization/","page":"Optimization","title":"Optimization","text":"get_measure","category":"page"},{"location":"code/2.optimization/#MomentTools.get_measure","page":"Optimization","title":"MomentTools.get_measure","text":"w, Xi = get_measure(M, t::Int64 = 2*M[:degree]-1 ,lambda = [(-1)^(k-1) for k in 1:M[:nu]])\n\nReturn the approximation of the moment sequence sum_i=1^nu lambda_i mu_i truncated to moments of degree <= t (default: twice the order of the relaxation minus 2), as weighted sum of Dirac measures: sum_k=1^r omega_k delta_xi_k where\n\nw is the vector of weights of the Dirac measures.\nXi is matrix of ntimes r support points of the corresponding Dirac measures. The column Xi[:,i] is the support point xi_i of the ith Dirac measure and its weights is w[i].\n\nw, Xi = get_measure(M)\n\n([0.1541368146508854, 0.5889741915171074, 0.256888993597116], [1.4142135624216647 1.414213562080608 1.4142135620270329; -1.732052464639053 1.4141771454788292 1.7319839273833693])\n\n\n\n\n\n","category":"function"},{"location":"code/2.optimization/","page":"Optimization","title":"Optimization","text":"get_series","category":"page"},{"location":"code/2.optimization/#MomentTools.get_series","page":"Optimization","title":"MomentTools.get_series","text":"get_series(M)\n\nReturn the vector of nu=M[:nu] series of optimal moments of the optimized moment program M.\n\n\n\n\n\n","category":"function"},{"location":"expl/0.real_roots/#A-simple-univariate-example","page":"A simple univariate example","title":"A simple univariate example","text":"","category":"section"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"using DynamicPolynomials, MomentTools","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"X = @polyvar x\np = x^4+x^3-x-1","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"$ x^{4} + x^{3} - x - 1 $","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"We minimize x^2 under the constraint p=0. ","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"using JuMP, MosekTools; optimizer = optimizer_with_attributes(Mosek.Optimizer, \"QUIET\" => true)\nv, M = minimize(x^2, [p], [], X, 4, optimizer)","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"(0.9999999936153254, \nA Moment program with:\nA JuMP Model\nMinimization problem with:\nVariables: 9\nObjective function type: GenericAffExpr{Float64,VariableRef}\n`GenericAffExpr{Float64,VariableRef}`-in-`MathOptInterface.EqualTo{Float64}`: 6 constraints\n`Array{VariableRef,1}`-in-`MathOptInterface.PositiveSemidefiniteConeTriangle`: 1 constraint\nModel mode: AUTOMATIC\nCachingOptimizer state: ATTACHED_OPTIMIZER\nSolver name: Dual model with Mosek attached\nNames registered in the model: basis, degree, dual, index, moments, monomials, nu, variables, y)","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"We use Mosek optimizer to solve the underlying SDP optimization problem. The first argument x^2 of the function minimize is the objective function. The second argument is the array of equality constraints, the third is the array of non-negativity constraints (here empty).","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"The function minimize returns v the optimal value found (here it is approx 1) and M the Moment Model built for the optimization (which type is MomentTools.MOM.Model). ","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"The minimizers can be obtained from M as follows:","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"get_minimizers(M)","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"1×2 Array{Float64,2}:\n -1.0  1.0","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"The minimizers are presented as a ntimes r matrix, where n is the number of variables (here n=1) and r is the number of points (here r=2). ","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"An approximation  of the associate measure can be obtained as follows:","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"get_measure(M)","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"([0.515012473322808, 0.484987522139862], [-1.0000000010949475 0.9999999995824738])","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"It corresponds approximately to the measure 05 delta_-1 + 05 delta_1 where delta_x is the Dirac measure supported on x.","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"Next, we search the root(s) with x geq 0. For that purpose, we minimize nothing (i.e. 1) and add the non-negativity constraint xgeq 0:","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"v, M = minimize(nothing, [p], [x], X, 4, optimizer)\nget_minimizers(M)","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"1×1 Array{Float64,2}:\n 1.0000000000498959","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"Now we search the negative root with maximal value of x.","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"v, M = maximize(x, [p], [-x], X, 4, optimizer)\nget_minimizers(M)","category":"page"},{"location":"expl/0.real_roots/","page":"A simple univariate example","title":"A simple univariate example","text":"1×1 Array{Float64,2}:\n -0.9999999994227465","category":"page"}]
}
